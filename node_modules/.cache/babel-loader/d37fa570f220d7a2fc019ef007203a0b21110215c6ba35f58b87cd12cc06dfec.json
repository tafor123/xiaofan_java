{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\nimport Cookies from 'js-cookie';\nconst request = axios.create({\n  baseURL: 'http://localhost:9090/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  const adminJson = Cookies.get('admin');\n  if (!adminJson) {\n    config.headers['token'] = JSON.parse(adminJson).token;\n  }\n  config.headers['token'] = user.token; // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === '401') {\n    router.push('/login');\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","Cookies","request","create","baseURL","timeout","interceptors","use","config","headers","adminJson","get","JSON","parse","token","user","error","Promise","reject","response","res","data","code","push","console","log"],"sources":["D:/project_test/library/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\nimport Cookies from 'js-cookie'\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:9090/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    const adminJson = Cookies.get('admin')\r\n    if(!adminJson){\r\n        config.headers['token']=JSON.parse(adminJson).token\r\n    }\r\n\r\n     config.headers['token'] = user.token;  // 设置请求头\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        if(res.code === '401'){\r\n            router.push('/login')\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAE,2BAA2B;EAAG;EACvCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EAEjE,MAAMC,SAAS,GAAGT,OAAO,CAACU,GAAG,CAAC,OAAO,CAAC;EACtC,IAAG,CAACD,SAAS,EAAC;IACVF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAACG,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC,CAACI,KAAK;EACvD;EAECN,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGM,IAAI,CAACD,KAAK,CAAC,CAAE;EACxC,OAAON,MAAM;AACjB,CAAC,EAAEQ,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAd,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACZ,GAAG,CAC7BY,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGR,IAAI,CAACC,KAAK,CAACO,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,IAAGA,GAAG,CAACE,IAAI,KAAK,KAAK,EAAC;IAClBtB,MAAM,CAACuB,IAAI,CAAC,QAAQ,CAAC;EACzB;EACA,OAAOH,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLQ,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGT,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}